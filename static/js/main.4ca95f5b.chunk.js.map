{"version":3,"sources":["components/ModelSwitcher/ModelSwitcher.module.scss","components/Footer/Footer.module.scss","containers/Home/Home.module.scss","containers/Layout/Layout.module.scss","components/ModelSwitcher/ModelLoader/ModelLoader.module.scss","cube.svg","components/Header/Header.module.scss","graphql/client.js","components/ModelSwitcher/ModelLoader/ModelLoader.js","components/ModelSwitcher/ModelSwitcher.js","graphql/queries/fetchModels.js","containers/Home/Home.js","components/Header/Header.js","components/Footer/Footer.js","containers/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","server","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","ModelLoader","props","src","exposure","name","poster","modelRef","className","styles","modelLoaderContainer","ref","style","zIndex","height","camera-orbit","alt","auto-rotate","camera-controls","defaultProps","ModelSwitcher","models","loading","modelsSrc","map","model","file","useRef","useState","currentModel","setCurrentModel","updateModel","useCallback","current","setAttribute","useEffect","loopInterval","setInterval","length","clearInterval","handleChangeModel","direction","modelSwitcherContainer","title","modelLoader","controlsContainer","role","onClick","prevButton","nextButton","modelInfoContainer","description","href","loadingSection","GET_MODELS","gql","Home","setModels","useQuery","data","error","homeContainer","errorContainer","Header","headerContainer","logo","data-tip","Footer","footerContainer","sign","aria-label","socialNetworks","Layout","layoutContainer","App","ApolloProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4ca95f5b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modelSwitcherContainer\":\"ModelSwitcher_modelSwitcherContainer__2Twtx\",\"title\":\"ModelSwitcher_title__2YA2r\",\"modelLoader\":\"ModelSwitcher_modelLoader__2KG0f\",\"modelInfoContainer\":\"ModelSwitcher_modelInfoContainer__3LInr\",\"loadingSection\":\"ModelSwitcher_loadingSection__1F3Om\",\"loading\":\"ModelSwitcher_loading__3DEyX\",\"controlsContainer\":\"ModelSwitcher_controlsContainer__1iuvm\",\"prevButton\":\"ModelSwitcher_prevButton__1E7c2\",\"nextButton\":\"ModelSwitcher_nextButton__q6bwg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footerContainer\":\"Footer_footerContainer__2Y17e\",\"sign\":\"Footer_sign__gP_FV\",\"socialNetworks\":\"Footer_socialNetworks__AeLtZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"homeContainer\":\"Home_homeContainer__2WlbD\",\"errorContainer\":\"Home_errorContainer__2mLaO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layoutContainer\":\"Layout_layoutContainer__a9bWS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modelLoaderContainer\":\"ModelLoader_modelLoaderContainer__8RhTW\"};","module.exports = __webpack_public_path__ + \"static/media/cube.00f9a34e.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"Header_headerContainer__39RjZ\"};","import { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\r\n\r\nexport const server = \"https://l3d-backend.herokuapp.com/\"; //\"http://192.168.0.14:8080/\";\r\n\r\nexport const client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link: new HttpLink({\r\n    uri: `${server}graphql`,\r\n  }),\r\n});\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ModelLoader.module.scss\";\r\n\r\nconst ModelLoader = (props) => {\r\n  const { src, exposure, name, poster, modelRef } = props;\r\n\r\n  const ModelLoaderStyle = { zIndex: 1, height: \"358px\" };\r\n  return (\r\n    <div className={styles.modelLoaderContainer}>\r\n      <model-viewer\r\n        ref={modelRef}\r\n        style={{ \"--poster-color\": \"rgba(1,1,1,0)\", ...ModelLoaderStyle }}\r\n        camera-orbit=\"45deg 55deg\"\r\n        src={src}\r\n        exposure={exposure}\r\n        alt={`A 3d model of ` + name}\r\n        poster={poster}\r\n        auto-rotate\r\n        camera-controls\r\n      ></model-viewer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModelLoader;\r\n\r\nModelLoader.defaultProps = {\r\n  exposure: \".5\",\r\n  poster: null,\r\n};\r\nModelLoader.propTypes = {\r\n  src: PropTypes.string,\r\n  exposure: PropTypes.string,\r\n  name: PropTypes.string,\r\n};\r\n","import React, { useRef, useEffect, useState, useCallback } from \"react\";\r\nimport styles from \"./ModelSwitcher.module.scss\";\r\n\r\nimport ModelLoader from \"./ModelLoader/ModelLoader\";\r\nimport { server } from \"../../graphql/client\";\r\n\r\nconst ModelSwitcher = (props) => {\r\n  const { models, loading } = props;\r\n  const modelsSrc = models.map((model) => `${server}static/${model.file}`);\r\n  const modelRef = useRef(null);\r\n  const [currentModel, setCurrentModel] = useState(0);\r\n\r\n  const updateModel = useCallback(() => {\r\n    if (modelRef.current)\r\n      modelRef.current.setAttribute(\"src\", modelsSrc[currentModel]);\r\n  }, [modelRef, modelsSrc, currentModel]);\r\n\r\n  //Loop switch transition\r\n  useEffect(() => {\r\n    const loopInterval = setInterval(() => {\r\n      currentModel + 1 < modelsSrc.length\r\n        ? setCurrentModel((currentModel) => currentModel + 1)\r\n        : setCurrentModel(0);\r\n    }, 10000);\r\n    updateModel();\r\n\r\n    return () => {\r\n      clearInterval(loopInterval);\r\n    };\r\n  }, [currentModel, modelsSrc, updateModel]);\r\n\r\n  const handleChangeModel = (direction) => {\r\n    switch (direction) {\r\n      case \"prev\":\r\n        currentModel > 0\r\n          ? setCurrentModel((currentModel) => currentModel - 1)\r\n          : setCurrentModel(modelsSrc.length - 1);\r\n        updateModel();\r\n\r\n        break;\r\n      case \"next\":\r\n        currentModel < modelsSrc.length - 1\r\n          ? setCurrentModel(currentModel + 1)\r\n          : setCurrentModel(0);\r\n        updateModel();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.modelSwitcherContainer}>\r\n      <div className={styles.title}>\r\n        <h2>3d art</h2>\r\n        <h1> Low Poly </h1>\r\n      </div>\r\n\r\n      <ModelLoader\r\n        className={styles.modelLoader}\r\n        modelRef={modelRef}\r\n        src={modelsSrc[currentModel]}\r\n        name=\"barril\"\r\n      ></ModelLoader>\r\n\r\n      <div className={styles.controlsContainer}>\r\n        <span\r\n          role=\"button\"\r\n          onClick={() => handleChangeModel(\"prev\")}\r\n          className={styles.prevButton}\r\n        ></span>\r\n        <span\r\n          role=\"button\"\r\n          onClick={() => handleChangeModel(\"next\")}\r\n          className={styles.nextButton}\r\n        ></span>\r\n      </div>\r\n\r\n      <div className={styles.modelInfoContainer}>\r\n        {!loading && models[currentModel] && (\r\n          <>\r\n            <h2>{models[currentModel].name}</h2>\r\n            <p>{models[currentModel].description}</p>\r\n            <a href={`${server}static/${models[currentModel].file}`}>\r\n              Download it !\r\n            </a>\r\n          </>\r\n        )}\r\n        {loading && (\r\n          <div className={styles.loadingSection}>\r\n            <p></p>\r\n            <p></p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModelSwitcher;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_MODELS = gql`\r\n  query getModels {\r\n    models {\r\n      name\r\n      description\r\n      file\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ModelSwitcher from \"../../components/ModelSwitcher/ModelSwitcher\";\r\nimport styles from \"./Home.module.scss\";\r\n\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_MODELS } from \"../../graphql/queries/fetchModels\";\r\n\r\nconst Home = (props) => {\r\n  const [models, setModels] = useState([]);\r\n  const { loading, data, error } = useQuery(GET_MODELS);\r\n\r\n  useEffect(() => {\r\n    if (!loading && data) {\r\n      setModels(data.models);\r\n    }\r\n  }, [data, loading]);\r\n\r\n  return (\r\n    <main className={styles.homeContainer}>\r\n      {!error ? (\r\n        <ModelSwitcher models={models} loading={loading} />\r\n      ) : (\r\n        <div className={styles.errorContainer}>\r\n          Ups it seems im still playing with this page, if the error persist\r\n          please contact me. Maybe somebody drop coffee on the server.\r\n        </div>\r\n      )}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport logo from \"../../cube.svg\";\r\nimport styles from \"./Header.module.scss\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header className={styles.headerContainer}>\r\n      <img src={logo} alt=\"logo\" data-tip=\"Keep walking pal\"></img>\r\n      <ReactTooltip />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport styles from \"./Footer.module.scss\";\r\n\r\nconst Footer = (props) => {\r\n  return (\r\n    <footer className={styles.footerContainer}>\r\n      <p className={styles.sign}>\r\n        Built with{\" \"}\r\n        <span role=\"img\" aria-label=\"heart emoji\">\r\n          &#128150;\r\n        </span>{\" \"}\r\n        by David Quiñonez\r\n      </p>\r\n      <div className={styles.socialNetworks}>\r\n        <a href=\"https://www.linkedin.com/in/david-alejandro-qui%C3%B1onez-mosquera-331b71171/\">\r\n          Li\r\n        </a>\r\n        <a href=\"https://github.com/Dalejan/3d-landing\">Gh</a>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport styles from \"./Layout.module.scss\";\r\nimport Home from \"../Home/Home\";\r\nimport Header from \"../../components/Header/Header\";\r\nimport Footer from \"../../components/Footer/Footer\";\r\n\r\nconst Layout = (props) => {\r\n  return (\r\n    <div className={styles.layoutContainer}>\r\n      <Header />\r\n      <Home></Home>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\n\nimport { client } from \"./graphql/client\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport Layout from \"./containers/Layout/Layout\";\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Layout></Layout>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}